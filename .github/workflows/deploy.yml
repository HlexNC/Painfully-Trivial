name: Build and Deploy to GHCR

on:
  push:
    branches: [main]
    paths:
      - 'streamlit_app/**'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches: [main]
    paths:
      - 'streamlit_app/**'
  release:
    types: [created]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/waste-sorting-assistant

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./streamlit_app
          file: ./streamlit_app/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Deploy to Streamlit Cloud (Optional)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          STREAMLIT_SHARE_EMAIL: ${{ secrets.STREAMLIT_SHARE_EMAIL }}
          STREAMLIT_SHARE_TOKEN: ${{ secrets.STREAMLIT_SHARE_TOKEN }}
        run: |
          echo "Deployment to Streamlit Cloud would happen here"
          # Add actual deployment commands if using Streamlit Cloud

  security-scan:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      security-events: write

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-notification:
    needs: [build-and-push, security-scan]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Send deployment notification
        run: |
          if [ "${{ needs.build-and-push.result }}" == "success" ]; then
            echo "‚úÖ Deployment successful!"
            echo "üê≥ Docker image available at: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
            echo "üöÄ Pull command: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
            echo "‚ñ∂Ô∏è  Run command: docker run -p 8501:8501 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          else
            echo "‚ùå Deployment failed!"
          fi
          if [ "${{ needs.security-scan.result }}" == "success" ]; then
            echo "üîç Security scan completed successfully!"
          else
            echo "‚ö†Ô∏è Security scan found vulnerabilities!"
          fi
          echo "üì¶ Image pushed to GitHub Container Registry: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "üìÑ View the image at: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
