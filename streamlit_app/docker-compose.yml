version: '3.9'

services:
  # Main application service
  waste-sorting-app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILD_DATE=${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        - VCS_REF=${VCS_REF:-$(git rev-parse --short HEAD)}
        - VERSION=${VERSION:-latest}
    image: ghcr.io/hlexnc/waste-sorting-assistant:${TAG:-latest}
    container_name: waste-sorting-assistant
    ports:
      - "${APP_PORT:-8501}:8501"
    environment:
      # Streamlit configuration
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
      - STREAMLIT_SERVER_FILE_WATCHER_TYPE=none
      - PYTHONUNBUFFERED=1
      
      # Application configuration
      - MODEL_CACHE_DIR=/app/models
      - DATA_CACHE_DIR=/app/data
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      
      # GitHub Release URLs (for model downloads)
      - GITHUB_RELEASE_URL=https://api.github.com/repos/HlexNC/Painfully-Trivial/releases/tags/v1.0.0
      - MODEL_DOWNLOAD_URL=https://github.com/HlexNC/Painfully-Trivial/releases/download/v1.0.0/waste_detector_best.pt
      - DATASET_DOWNLOAD_URL=https://github.com/HlexNC/Painfully-Trivial/releases/download/v1.0.0/cv_garbage.zip
    
    volumes:
      # Persistent storage for models and data
      - model_data:/app/models
      - app_data:/app/data
      
      # For development - mount source code
      - ./app.py:/app/app.py:ro
      - ./pages:/app/pages:ro
      - ./utils:/app/utils:ro
      
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    networks:
      - waste-sorting-network
    
    deploy:
      resources:
        limits:
          cpus: '${CPU_LIMIT:-2}'
          memory: ${MEMORY_LIMIT:-4G}
        reservations:
          cpus: '${CPU_RESERVATION:-1}'
          memory: ${MEMORY_RESERVATION:-2G}
    
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "traefik.enable=true"
      - "traefik.http.routers.waste-sorting.rule=Host(`${DOMAIN:-localhost}`)"
      - "traefik.http.services.waste-sorting.loadbalancer.server.port=8501"

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: waste-sorting-nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      - waste-sorting-app
    networks:
      - waste-sorting-network
    profiles:
      - production
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: waste-sorting-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis_data:/data
    networks:
      - waste-sorting-network
    profiles:
      - cache
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for analytics data (optional)
  postgres:
    image: postgres:16-alpine
    container_name: waste-sorting-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-waste_sorting}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeme}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - waste-sorting-network
    profiles:
      - database
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: waste-sorting-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - waste-sorting-network
    profiles:
      - monitoring
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: waste-sorting-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    networks:
      - waste-sorting-network
    profiles:
      - monitoring
    restart: unless-stopped
    depends_on:
      - prometheus

  # Watchtower for automatic updates
  watchtower:
    image: containrrr/watchtower
    container_name: waste-sorting-watchtower
    command: --interval 300 --cleanup --label-enable
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - waste-sorting-network
    profiles:
      - autoupdate
    restart: unless-stopped

  # Backup service
  backup:
    image: offen/docker-volume-backup:latest
    container_name: waste-sorting-backup
    environment:
      - BACKUP_FILENAME=waste-sorting-backup-%Y-%m-%d_%H-%M-%S.tar.gz
      - BACKUP_PRUNING_PREFIX=waste-sorting-backup-
      - BACKUP_RETENTION_DAYS=7
      - BACKUP_STOP_CONTAINER_LABEL=waste-sorting-assistant
    volumes:
      - model_data:/backup/model_data:ro
      - app_data:/backup/app_data:ro
      - ./backups:/archive
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - waste-sorting-network
    profiles:
      - backup

networks:
  waste-sorting-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  model_data:
    driver: local
  app_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_cache:
    driver: local
